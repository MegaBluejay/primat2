#+startup: latexpreview
#+include: "~/org/header.org"

#+begin_src emacs-lisp :session py :exports none :results silent
(pipenv-activate)
#+end_src

#+begin_src python :session py :exports none :results silent
import os

os.chdir("../..")

from primat2.lab1.expr import *
import numpy as np
#+end_src

* Вариант 1

Две конкурирующие крупные торговые фирмы $F_1$ и $F_2$, планируют построить в одном из четырех небольших городов $G_1$, $G_2$, $G_3$, $G_4$, лежащих вдоль автомагистрали, по одному универсаму.

#+name: data1
|     | $G_1$ | $G_2$ | $G_3$ | $G_4$ |
|-----+-------+-------+-------+-------|
| км  |     0 |    30 |    40 |   150 |
| тыс |    30 |    50 |    40 |    30 |


Доход определяется численностью населения городов и степенью удаленности.

Пусть $d_j^i$ - расстояния от магазина $j$ фирмы до $i$ города

При $d_1^i < d_2^i$ $F_1$ получает 75%
При $d_1^i = d_2^i$ 60%
При $d_1^i > d_2^i$ 45%

Матрица игры:

#+name: matrix1
#+begin_src python :session py :exports both :var data=data1 :rownames yes
ds, pops = data

def f(i, j, k):
    di, dj = abs(ds[i] - ds[k]), abs(ds[j] - ds[k])
    if di < dj:
        return 0.75
    elif di == dj:
        return 0.6
    else:
        return 0.45

[[sum(pops[k] * f(i, j, k) for k in range(4)) for j in range(4)] for i in range(4)]
#+end_src

#+attr_latex: :mode inline-math :environment pmatrix
#+RESULTS: matrix1
|  90.0 | 76.5 | 76.5 | 103.5 |
| 103.5 | 90.0 | 91.5 | 103.5 |
| 103.5 | 88.5 | 90.0 | 103.5 |
|  76.5 | 76.5 | 76.5 |  90.0 |

У нее есть седловая точка:

#+begin_src python :session py :exports both :var matrix=matrix1
max(map(min, matrix)), min(max(matrix[i][j] for i in range(4)) for j in range(4))
#+end_src

#+RESULTS:
| 90.0 | 90.0 |

Оптимально обеим фирмам строить в $G_2$

* Вариант 2

Двум погрузчикам разной мощности за 24 часа нужно погрузить на первой площадке 230 т, на второй - 68 т. Первый погрузчик
на 1-ой площадке может погрузить 10 т в час, а на 2-ой - 12 т в час. Второй погрузчик на каждой площадке может погрузить
по 13 т в час. Стоимость работ, связанных с погрузкой 1 т первым погрузчиком на первой площадке 8 руб., на второй - 7
руб., вторым погрузчиком на первой площадке - 12 руб., на второй - 13 руб. Нужно найти, какой объем работ должен
выполнить каждый погрузчик на каждой площадке, чтобы стоимость всех работ по погрузке была минимальной.

Обозначим $x_1, x_2, x_3, x_4$ - времена работ погрузчиков в часах- 1 на 1 площадке, 1 на 2 площадке, 2 на 1 площаке, и 2 на 2 площадке

Условие в этом не четко, но будем считать, что погрузчики не могут работать одновременно.

Тогда $8 \cdot 10 x_1 + 12 \cdot 13 x_3 + 7 \cdot 12 x_2 + 13 \cdot 13 x_4 \rightarrow \min$

\begin{cases}
10 x_1 + 13 x_3 = 230 \\
12 x_2 + 13 x_4 = 68 \\
x_1 + x_2 + x_3 + x_4 \leq 24 \\
x_1, x_2, x_3, x_4 \geq 0
\end{cases}

Решаем симлекс методом

#+name: ans2
#+begin_src python :session py :exports both
ans = solve1(
    n=4,
    objective=8 * 10 * x1 + 12 * 13 * x3 + 7 * 12 * x2 + 13 * 13 * x4,
    constraints=[
        10 * x1 + 13 * x3 - 230,
        12 * x2 + 13 * x4 - 68,
        x1 + x2 + x3 + x4 <= 24
    ],
    direction="min"
)
[round(t, 5) for t in ans]
#+end_src

#+RESULTS: ans2
| 2.77778 | 5.66667 | 15.55556 | 0.0 |

Объем работ:

#+begin_src python :session py :exports both :var ans=ans2
[round(t * x, 3) for t, x in zip(ans, [10, 13, 12, 13])]
#+end_src

#+RESULTS:
| 27.778 | 73.667 | 186.667 | 0.0 |


* Вариант 6

| 7 | 2 | 5 | 1 |
| 2 | 2 | 3 | 4 |
| 5 | 3 | 4 | 4 |
| 3 | 2 | 1 | 6 |

Упростим матрицу, используя доминирующие строки и столбцы

#+name: matrix6
| 7 | 5 | 1 |
| 2 | 3 | 4 |
| 3 | 1 | 6 |

#+begin_src python :session py :exports both :var matrix=matrix6
min(map(max, matrix)), max(min(matrix[i][j] for i in range(3)) for j in range(3))
#+end_src

#+RESULTS:
| 4 | 2 |

Седловой точки нет

Составим систему для ЛП

$x_1 + x_2 + x_3 \rightarrow \max$

\begin{cases}
7 x_1 + 2 x_2 + 3 x_3 \leq 1 \\
5 x_1 + 3 x_2 + x_3 \leq 1 \\
x_1 + 4 x_2 + 6 x_3 \leq 1
\end{cases}

Решаем ее

#+name: sol6
#+begin_src python :session py :exports both
solve1(
    n=3,
    objective=x1 + x2 + x3,
    constraints=[
        7 * x1 + 2 * x2 + 3 * x3 <= 1,
        5 * x1 + 3 * x2 + x3  <= 1,
        x1 + 4 * x2 + 6 * x3 <= 1,
    ],
    direction="max",
)
#+end_src

#+RESULTS: sol6
| 0.07692308 | 0.1978022 | 0.02197802 |

Стратегия первого игрока:

#+name: ans6_1
#+begin_src python :session py :exports both :var sol=sol6
total = sum(sol)
[round(x / total, 3) for x in sol]
#+end_src

#+RESULTS: ans6_1
| 0.259 | 0.667 | 0.074 |

Для второго игрока:

#+name: ans6_2
#+begin_src python :session py :exports both
sol = solve1(
    n=3,
    objective=x1 + x2 + x3,
    constraints=[
        7 * x1 + 5 * x2 + x3 >= 1,
        2 * x1 + 3 * x2 + 4 * x3  >= 1,
        3 * x1 + x2 + 6 * x3 >= 1,
    ],
    direction="min",
)
[round(x /sol.sum(), 3) for x in sol]
#+end_src

#+RESULTS: ans6_2
| 0.074 | 0.481 | 0.444 |

Математическое ожидание проигрыша первого игрока:

#+begin_src python :session py :exports both :var ans1=ans6_1 :var ans2=ans6_2 :var matrix=matrix6
round(sum(matrix[i][j] * ans1[i] * ans2[j] for i in range(3) for j in range(3)), 3)
#+end_src

#+RESULTS:
: 3.367


* Вариант 7

Платежная матрица:

#+name: matrix7
#+attr_latex: :mode inline-math :environment pmatrix
|  1 | -1 | -1 |
| -1 | -1 |  3 |
| -1 |  2 | -1 |

Стратегии:

#+name: strat7
#+attr_latex: :mode inline-math :environment pmatrix
| 6 / 13 | 3 / 13 | 4 / 13 |
| 6 / 13 | 4 / 13 | 3 / 13 |

#+name: strat7_fixed
#+begin_src python :session py :exports none :var strat=strat7
[list(map(eval, row)) for row in strat]
#+end_src

#+RESULTS: strat7_fixed
| 0.46153846153846156 | 0.23076923076923078 |  0.3076923076923077 |
| 0.46153846153846156 |  0.3076923076923077 | 0.23076923076923078 |

#+begin_src python :session py :exports both :var matrix=matrix7 :var strat=strat7_fixed
strat1, strat2 = strat
round(sum(strat1[i] * sum(matrix[i][j] * strat2[j] for j in range(3)) for i in range(3)), 3)
#+end_src

#+RESULTS:
: -0.077

* Вариант 8

$x_1 + x_2 \rightarrow \min$

\begin{cases}
7 x_1 + 2 x_2 \geq 1 \\
x_1 + 11 x_2 \geq 1 \\
x_1, x_2 \geq 0
\end{cases}

Пусть

\begin{cases}
x_1 = \frac{x}{v} \\
x_2 = \frac{1 - x}{v}
\end{cases}

Тогда задачу можно записать как

$v = \frac{1}{x_1 + x_2} \rightarrow max$

\begin{cases}
7 x + 2 (1 - x) \geq v \\
x + 11 (1 - x) \geq v \\
1 \geq x \geq 0
\end{cases}

Если рассматривать $x$, как вероятность выбора 1м игроком 1й стратегии, а каждую строку как случай чистой стратегии 2го игрока,
это соответствует матричной игре

#+name: matrix8
#+attr_latex: :mode inline-math :environment pmatrix
| 7 |  1 |
| 2 | 11 |

* Вариант 9

Матрица игры:

| 7 | 2 | 5 | 1 |
| 2 | 2 | 3 | 4 |
| 5 | 3 | 4 | 4 |
| 3 | 2 | 1 | 6 |
